.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dancer::Route::Cache 3"
.TH Dancer::Route::Cache 3 "2011-07-07" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Route::Cache \- route caching mechanism for Dancer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $cache = Dancer::Route::Cache\->new(
\&        path_limit => 300, # optional
\&    );
\&
\&    # storing a path
\&    # /new/item/ is the path, $route is a compiled route
\&    $cache\->store_path( \*(Aqget\*(Aq, \*(Aq/new/item/\*(Aq, $route );
\&    my $cached_route = $cache\->route_from_path(\*(Aq/new/item/\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When Dancer first starts, it has to compile a regexp list of all the routes.
Then, on each request it goes over the compiled routes list and tries to compare
the requested path to a route.
.PP
A major drawback is that Dancer has to go over the matching on every request,
which (especially on CGI-based applications) can be very time consuming.
.PP
The caching mechanism allows to cache some requests to specific routes (but
\&\fB\s-1NOT\s0\fR specific results) and run those routes on a specific path. This allows us
to speed up Dancer quite a lot.
.SH "METHODS/SUBROUTINES"
.IX Header "METHODS/SUBROUTINES"
.SS "new(@args)"
.IX Subsection "new(@args)"
Creates a new route cache object.
.PP
.Vb 4
\&    my $cache = Dancer::Route::Cache\->new(
\&        path_limit => 100,   # only 100 paths will be cached
\&        size_limit => \*(Aq30M\*(Aq, # max size for cache is 30MB
\&    );
.Ve
.PP
Please check the \f(CW\*(C`ATTRIBUTES\*(C'\fR section below to learn about the arguments for
\&\f(CW\*(C`new()\*(C'\fR.
.SS "route_from_path($path)"
.IX Subsection "route_from_path($path)"
Fetches the route from the path in the cache.
.ie n .SS "store_path( $method, $path => $route )"
.el .SS "store_path( \f(CW$method\fP, \f(CW$path\fP => \f(CW$route\fP )"
.IX Subsection "store_path( $method, $path => $route )"
Stores the route in the cache according to the path and \f(CW$method\fR.
.PP
For developers: the reason we're using an object for this and not directly using
the registry hash is because we need to enforce the limits.
.SS "parse_size($size)"
.IX Subsection "parse_size($size)"
Parses the size wanted to bytes. It can handle Kilobytes, Megabytes or
Gigabytes.
.PP
\&\fB\s-1NOTICE:\s0\fR handles bytes, not bits!
.PP
.Vb 1
\&    my $bytes = $cache\->parse_size(\*(Aq30M\*(Aq);
\&
\&    # doesn\*(Aqt need an existing object
\&    $bytes = Dancer::Route::Cache\->parse_size(\*(Aq300G\*(Aq); # works this way too
.Ve
.SS "route_cache_size"
.IX Subsection "route_cache_size"
Returns a rough calculation the size of the cache. This is used to enforce the
size limit.
.SS "route_cache_paths"
.IX Subsection "route_cache_paths"
Returns all the paths in the cache. This is used to enforce the path limit.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "size_limit($limit)"
.IX Subsection "size_limit($limit)"
Allows to set a size limit of the cache.
.PP
Returns the limit (post-set).
.PP
.Vb 2
\&    $cache\->size_limit(\*(Aq10K\*(Aq);      # sets limit
\&    my $limit = $cache\->size_limit; # gets limit
.Ve
.SS "path_limit($limit)"
.IX Subsection "path_limit($limit)"
A path limit. That is, the amount of paths that whose routes will be cached.
.PP
Returns the limit (post-set).
.PP
.Vb 2
\&    $cache\->path_limit(\*(Aq100\*(Aq);      # sets limit
\&    my $limit = $cache\->path_limit; # gets limit
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Sawyer X
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2010 Sawyer X.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
