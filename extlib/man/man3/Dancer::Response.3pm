.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dancer::Response 3"
.TH Dancer::Response 3 "2011-07-07" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Response \- Response object for Dancer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    # create a new response object
\&    Dancer::Response\->new(
\&        status => 200,
\&        content => \*(Aqthis is my content\*(Aq
\&    );
\&
\&    Dancer::SharedData\->response\->status; # 200
\&
\&    # fetch current response object
\&    my $response = Dancer::SharedData\->response;
\&
\&    # fetch the current status
\&    $response\->status; # 200
\&
\&    # change the status
\&    $response\->status(500);
.Ve
.SH "PUBLIC API"
.IX Header "PUBLIC API"
.SS "new"
.IX Subsection "new"
.Vb 5
\&    Dancer::Response\->new(
\&        status  => 200,
\&        content => \*(Aqmy content\*(Aq,
\&        headers => HTTP::Headers\->new(...),
\&    );
.Ve
.PP
create and return a new Dancer::Response object
.SS "current"
.IX Subsection "current"
.Vb 1
\&    my $response = Dancer::SharedData\->response\->current();
.Ve
.PP
return the current Dancer::Response object, and reset the object
.SS "exists"
.IX Subsection "exists"
.Vb 3
\&    if ($response\->exists) {
\&        ...
\&    }
.Ve
.PP
test if the Dancer::Response object exists
.SS "content"
.IX Subsection "content"
.Vb 3
\&    # get the content
\&    my $content = $response\->content;
\&    my $content = Dancer::SharedData\->response\->content;
\&
\&    # set the content
\&    $response\->content(\*(Aqmy new content\*(Aq);
\&    Dancer::SharedData\->response\->content(\*(Aqmy new content\*(Aq);
.Ve
.PP
set or get the content of the current response object
.SS "status"
.IX Subsection "status"
.Vb 3
\&    # get the status
\&    my $status = $response\->status;
\&    my $status = Dancer::SharedData\->response\->status;
\&
\&    # set the status
\&    $response\->status(201);
\&    Dancer::SharedData\->response\->status(201);
.Ve
.PP
set or get the status of the current response object
.SS "content_type"
.IX Subsection "content_type"
.Vb 3
\&    # get the status
\&    my $ct = $response\->content_type;
\&    my $ct = Dancer::SharedData\->response\->content_type;
\&
\&    # set the status
\&    $response\->content_type(\*(Aqapplication/json\*(Aq);
\&    Dancer::SharedData\->response\->content_type(\*(Aqapplication/json\*(Aq);
.Ve
.PP
set or get the status of the current response object
.SS "pass"
.IX Subsection "pass"
.Vb 2
\&    $response\->pass;
\&    Dancer::SharedData\->response\->pass;
.Ve
.PP
set the pass value to one for this response
.SS "has_passed"
.IX Subsection "has_passed"
.Vb 3
\&    if ($response\->has_passed) {
\&        ...
\&    }
\&
\&    if (Dancer::SharedData\->response\->has_passed) {
\&        ...
\&    }
.Ve
.PP
test if the pass value is set to true
.SS "halt"
.IX Subsection "halt"
.Vb 2
\&    Dancer::SharedData\->response\->halt();
\&    $response\->halt;
.Ve
.SS "halted"
.IX Subsection "halted"
.Vb 3
\&    if (Dancer::SharedData\->response\->halted) {
\&       ...
\&    }
\&
\&    if ($response\->halted) {
\&        ...
\&    }
.Ve
.SS "header"
.IX Subsection "header"
.Vb 3
\&    # set the header
\&    $response\->header(\*(AqX\-Foo\*(Aq => \*(Aqbar\*(Aq);
\&    Dancer::SharedData\->response\->header(\*(AqX\-Foo\*(Aq => \*(Aqbar\*(Aq);
\&
\&    # get the header
\&    my $header = $response\->header(\*(AqX\-Foo\*(Aq);
\&    my $header = Dancer::SharedData\->response\->header(\*(AqX\-Foo\*(Aq);
.Ve
.PP
get or set the value of a header
.SS "headers"
.IX Subsection "headers"
.Vb 2
\&    $response\->headers(HTTP::Headers\->new(...));
\&    Dancer::SharedData\->response\->headers(HTTP::Headers\->new(...));
.Ve
.PP
return the list of headers for the current response
.SS "headers_to_array"
.IX Subsection "headers_to_array"
.Vb 2
\&    my $headers_psgi = $response\->headers_to_array();
\&    my $headers_psgi = Dancer::SharedData\->response\->headers_to_array();
.Ve
.PP
this method is called before returning a \s-1PSGI\s0 response. It transforms the list of headers to an array reference.
