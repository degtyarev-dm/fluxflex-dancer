.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dancer::FileUtils 3"
.TH Dancer::FileUtils 3 "2011-08-17" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::FileUtils \- helper providing file utilities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Dancer::FileUtils qw/dirname path/;
\&
\&    # for \*(Aqpath/to/file\*(Aq
\&    my $dir  = dirname($path); # returns \*(Aqpath/to\*(Aq
\&    my $path = path($path);    # returns \*(Aq/abs/path/to/file\*(Aq
\&
\&
\&    use Dancer::FileUtils qw/path read_file_content/;
\&
\&    my $content = read_file_content( path( \*(Aqfolder\*(Aq, \*(Aqfolder\*(Aq, \*(Aqfile\*(Aq ) );
\&    my @content = read_file_content( path( \*(Aqfolder\*(Aq, \*(Aqfolder\*(Aq, \*(Aqfile\*(Aq ) );
\&
\&    use Dancer::FileUtils qw/read_glob_content set_file_mode/;
\&
\&    open my $fh, \*(Aq<\*(Aq, $file or die "$!\en";
\&    set_file_mode($fh);
\&    my @content = read_file_content($fh);
\&    my $content = read_file_content($fh);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dancer::FileUtils includes a few file related utilities related that Dancer
uses internally. Developers may use it instead of writing their own
file reading subroutines or using additional modules.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "dirname"
.IX Subsection "dirname"
.Vb 1
\&    use Dancer::FileUtils \*(Aqdirname\*(Aq;
\&
\&    my $dir = dirname($path);
.Ve
.PP
Exposes File::Basename's \fIdirname\fR, to allow fetching a directory name from
a path. On most \s-1OS\s0, returns all but last level of file path. See
File::Basename for details.
.SS "open_file"
.IX Subsection "open_file"
.Vb 2
\&    use Dancer::FileUtils \*(Aqopen_file\*(Aq;
\&    my $fh = open_file(\*(Aq<\*(Aq, $file) or die $message;
.Ve
.PP
Calls open and returns a filehandle. Takes in account the 'charset' setting
from Dancer's configuration to open the file in the proper encoding (or
defaults to utf\-8 if setting not present).
.SS "path"
.IX Subsection "path"
.Vb 1
\&    use Dancer::FileUtils \*(Aqpath\*(Aq;
\&
\&    my $path = path( \*(Aqfolder\*(Aq, \*(Aqfolder\*(Aq, \*(Aqfilename\*(Aq);
.Ve
.PP
Provides comfortable path resolving, internally using File::Spec.
.SS "read_file_content"
.IX Subsection "read_file_content"
.Vb 1
\&    use Dancer::FileUtils \*(Aqread_file_content\*(Aq;
\&
\&    my @content = read_file_content($file);
\&    my $content = read_file_content($file);
.Ve
.PP
Returns either the content of a file (whose filename is the input), \fIundef\fR
if the file could not be opened.
.PP
In array context it returns each line (as defined by $/) as a seperate element;
in scalar context returns the entire contents of the file.
.SS "read_glob_content"
.IX Subsection "read_glob_content"
.Vb 1
\&    use Dancer::FileUtils \*(Aqread_glob_content\*(Aq;
\&
\&    open my $fh, \*(Aq<\*(Aq, $file or die "$!\en";
\&    my @content = read_glob_content($fh);
\&    my $content = read_glob_content($fh);
.Ve
.PP
Same as \fIread_file_content\fR, only it accepts a file handle. Returns the
content and \fBcloses the file handle\fR.
.SS "set_file_mode"
.IX Subsection "set_file_mode"
.Vb 1
\&    use Dancer::FileUtils \*(Aqset_file_mode\*(Aq;
\&
\&    set_file_mode($fh);
.Ve
.PP
Applies charset setting from Dancer's configuration. Defaults to utf\-8 if no
charset setting.
.SH "EXPORT"
.IX Header "EXPORT"
Nothing by default. You can provide a list of subroutines to import.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alexis Sukrieh
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2009\-2011 Alexis Sukrieh.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
