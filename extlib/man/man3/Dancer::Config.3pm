.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dancer::Config 3"
.TH Dancer::Config 3 "2011-08-17" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Config \- how to configure Dancer to suit your needs
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dancer::Config handles reading and changing the configuration of your Dancer
apps.  The documentation for this module aims to describe how to change
settings, and which settings are available.
.SH "SETTINGS"
.IX Header "SETTINGS"
You can change a setting with the keyword \fBset\fR, like the following:
.PP
.Vb 1
\&    use Dancer;
\&
\&    # changing default settings
\&    set port         => 8080;
\&    set content_type => \*(Aqtext/plain\*(Aq;
\&    set startup_info => 0;
.Ve
.PP
A better way of defining settings exists: using \s-1YAML\s0 file. For this to be
possible, you have to install the \s-1YAML\s0 module. If a file named \fBconfig.yml\fR
exists in the application directory, it will be loaded, as a setting group.
.PP
The same is done for the environment file located in the \fBenvironments\fR
directory.
.SH "SUPPORTED SETTINGS"
.IX Header "SUPPORTED SETTINGS"
.SS "Run mode and listening interface/port"
.IX Subsection "Run mode and listening interface/port"
\fIserver (string)\fR
.IX Subsection "server (string)"
.PP
The \s-1IP\s0 address that the Dancer app should bind to.  Default is 0.0.0.0, i.e.
bind to all available interfaces.
.PP
\fIport (int)\fR
.IX Subsection "port (int)"
.PP
The port Dancer will listen to.
.PP
Default value is 3000. This setting can be changed on the command-line with the
\&\fB\-\-port\fR switch.
.PP
\fIdaemon (boolean)\fR
.IX Subsection "daemon (boolean)"
.PP
If set to true, runs the standalone webserver in the background.
This setting can be changed on the command-line with the \fB\-\-daemon\fR flag.
.PP
\fIbehind_proxy (boolean)\fR
.IX Subsection "behind_proxy (boolean)"
.PP
If set to true, Dancer will look to \f(CW\*(C`X\-Forwarded\-Protocol\*(C'\fR and
\&\f(CW\*(C`X\-Forwarded\-host\*(C'\fR when constructing URLs (for example, when using
\&\f(CW\*(C`redirect\*(C'\fR. This is useful if your application is behind a proxy.
.SS "Content type / character set"
.IX Subsection "Content type / character set"
\fIcontent_type (string)\fR
.IX Subsection "content_type (string)"
.PP
The default content type of outgoing content.
Default value is 'text/html'.
.PP
\fIcharset (string)\fR
.IX Subsection "charset (string)"
.PP
This setting has multiple effects:
.IP "\(bu" 4
It sets the default charset of outgoing content. \f(CW\*(C`charset=\*(C'\fR item will be
added to Content-Type response header.
.IP "\(bu" 4
It makes Unicode bodies in \s-1HTTP\s0 responses of \f(CW\*(C`text/*\*(C'\fR types to be encoded to
this charset.
.IP "\(bu" 4
It also indicates to Dancer in which charset the static files and templates are
encoded.
.IP "\(bu" 4
If you're using Dancer::Plugin::Database, \s-1UTF\-8\s0 support will automatically be
enabled for your database \- see 
\&\*(L"\s-1AUTOMATIC\s0 \s-1UTF\-8\s0 \s-1SUPPORT\s0\*(R" in Dancer::Plugin::Database
.PP
Default value is empty which means don't do anything. \s-1HTTP\s0 responses
without charset will be interpreted as \s-1ISO\-8859\-1\s0 by most clients.
.PP
You can cancel any charset processing by specifying your own charset
in Content-Type header or by ensuring that response body leaves your
handler without Unicode flag set (by encoding it into some 8bit
charset, for example).
.PP
Also, since automatically serialized \s-1JSON\s0 responses have
\&\f(CW\*(C`application/json\*(C'\fR Content-Type, you should always encode them by
hand.
.PP
\fIdefault_mime_type (string)\fR
.IX Subsection "default_mime_type (string)"
.PP
Dancer's Dancer::MIME module uses \f(CW\*(C`application/data\*(C'\fR as a default
mime type. This setting lets the user change it. For example, if you
have a lot of files being served in the \fBpublic\fR folder that do not
have an extension, and are text files, set the \f(CW\*(C`default_mime_type\*(C'\fR to
\&\f(CW\*(C`text/plain\*(C'\fR.
.SS "File / directory locations"
.IX Subsection "File / directory locations"
\fIenvironment (string)\fR
.IX Subsection "environment (string)"
.PP
This is the name of the environment that should be used. Standard
Dancer applications have a \f(CW\*(C`environments\*(C'\fR folder with specific
configuration files for different environments (usually development
and production environments). They specify different kind of error
reporting, deployment details, etc. These files are read after the
generic \f(CW\*(C`config.yml\*(C'\fR configuration file.
.PP
The running environment can be set with:
.PP
.Vb 1
\&   set environment => "production";
.Ve
.PP
Note that this variable is also used as a default value if other
values are not defined.
.PP
\fIappdir (directory)\fR
.IX Subsection "appdir (directory)"
.PP
This is the path where your application will live.  It's where Dancer
will look by default for your config files, templates and static
content.
.PP
It is typically set by \f(CW\*(C`use Dancer\*(C'\fR to use the same directory as your
script.
.PP
\fIpublic (directory)\fR
.IX Subsection "public (directory)"
.PP
This is the directory, where static files are stored. Any existing
file in that directory will be served as a static file, before
matching any route.
.PP
By default, it points to \f(CW$appdir\fR/public.
.PP
\fIviews (directory)\fR
.IX Subsection "views (directory)"
.PP
This is the directory where your templates and layouts live.  It's the
\&\*(L"view\*(R" part of \s-1MVC\s0 (model, view, controller).
.PP
This defaults to \f(CW$appdir\fR/views.
.SS "Templating & layouts"
.IX Subsection "Templating & layouts"
\fItemplate\fR
.IX Subsection "template"
.PP
Allows you to configure which template engine should be used.  For instance, to
use Template Toolkit, add the following to \f(CW\*(C`config.yml\*(C'\fR:
.PP
.Vb 1
\&    template: template_toolkit
.Ve
.PP
\fIlayout (string)\fR
.IX Subsection "layout (string)"
.PP
The name of the layout to use when rendering view. Dancer will look for
a matching template in the directory \f(CW$views\fR/layout.
.SS "Logging, debugging and error handling"
.IX Subsection "Logging, debugging and error handling"
\fIimport_warnings (boolean, default: enabled)\fR
.IX Subsection "import_warnings (boolean, default: enabled)"
.PP
If true, or not present, \f(CW\*(C`use warnings\*(C'\fR will be in effect in scripts in which
you import \f(CW\*(C`Dancer\*(C'\fR.  Set to a false value to disable this.
.PP
\fIstartup_info (boolean)\fR
.IX Subsection "startup_info (boolean)"
.PP
If set to true, prints a banner at the server start with information such as
versions and the environment (or \*(L"dancerfloor\*(R").
.PP
Conforms to the environment variable \s-1DANCER_STARTUP_INFO\s0.
.PP
\fIwarnings (boolean)\fR
.IX Subsection "warnings (boolean)"
.PP
If set to true, tells Dancer to consider all warnings as blocking errors.
.PP
\fItraces (boolean)\fR
.IX Subsection "traces (boolean)"
.PP
If set to true, Dancer will display full stack traces when a warning or a die
occurs. (Internally sets Carp::Verbose). Default to false.
.PP
\fIlog_path (string)\fR
.IX Subsection "log_path (string)"
.PP
Folder where the ``file \f(CW\*(C`logger\*(C'\fR'' saves logfiles.
.PP
\fIlog_file (string)\fR
.IX Subsection "log_file (string)"
.PP
Name of the file to create when ``file \f(CW\*(C`logger\*(C'\fR'' is active. It
defaults to the \f(CW\*(C`environment\*(C'\fR setting contents.
.PP
\fIlogger (enum)\fR
.IX Subsection "logger (enum)"
.PP
Select which logger to use.  For example, to write to log files in \f(CW\*(C`log_path\*(C'\fR:
.PP
.Vb 1
\&    logger: file
.Ve
.PP
Or to direct log messages to the console from which you started your Dancer app
in standalone mode,
.PP
.Vb 1
\&    logger: console
.Ve
.PP
Various other logger backends are available on \s-1CPAN\s0, including 
Dancer::Logger::Syslog, Dancer::Logger::Log4perl, Dancer::Logger::PSGI
(which can, with the aid of Plack middlewares, send log messages to a browser's
console window) and others.
.PP
\fIlog (enum)\fR
.IX Subsection "log (enum)"
.PP
Tells which log messages should be actually logged. Possible values are
\&\fBcore\fR, \fBdebug\fR, \fBwarning\fR or \fBerror\fR.
.IP "\fBcore\fR : all messages are logged, including some from Dancer itself" 4
.IX Item "core : all messages are logged, including some from Dancer itself"
.PD 0
.IP "\fBdebug\fR : all messages are logged" 4
.IX Item "debug : all messages are logged"
.IP "\fBwarning\fR : only warning and error messages are logged" 4
.IX Item "warning : only warning and error messages are logged"
.IP "\fBerror\fR : only error messages are logged" 4
.IX Item "error : only error messages are logged"
.PD
.PP
During development, you'll probably want to use \f(CW\*(C`debug\*(C'\fR to see your own debug
messages, and \f(CW\*(C`core\*(C'\fR if you need to see what Dancer is doing.  In production,
you'll likely want \f(CW\*(C`error\*(C'\fR or \f(CW\*(C`warning\*(C'\fR only, for less-chatty logs.
.PP
\fIshow_errors (boolean)\fR
.IX Subsection "show_errors (boolean)"
.PP
If set to true, Dancer will render a detailed debug screen whenever an error is
caught. If set to false, Dancer will render the default error page, using
\&\f(CW$public\fR/$error_code.html if it exists or the template specified by the
\&\f(CW\*(C`error_template\*(C'\fR setting.
.PP
The error screen attempts to sanitise sensitive looking information (passwords /
card numbers in the request, etc) but you still should not have show_errors
enabled whilst in production, as there is still a risk of divulging details.
.PP
\fIerror_template (template path)\fR
.IX Subsection "error_template (template path)"
.PP
This setting lets you specify a template to be used in case of runtime
error. At the present moment the template can use three variables:
.IP "\fBtitle\fR" 4
.IX Item "title"
The error title.
.IP "\fBmessage\fR" 4
.IX Item "message"
The error message.
.IP "\fBcode\fR" 4
.IX Item "code"
The code throwing that error.
.PP
\fIauto_reload (boolean)\fR
.IX Subsection "auto_reload (boolean)"
.PP
Requires Module::Refresh and Clone.
.PP
If set to true, Dancer will reload the route handlers whenever the file where
they are defined is changed. This is very useful in development environment but
\&\fBshould not be enabled in production\fR. Enabling this flag in production yields
a major negative effect on performance because of Module::Refresh.
.PP
When this flag is set, you don't have to restart your webserver whenever you
make a change in a route handler.
.PP
Note that Module::Refresh only operates on files in \f(CW%INC\fR, so if the script
your Dancer app is started from changes, even with auto_reload enabled, you will
still not see the changes reflected until you start your app.
.SS "Session engine"
.IX Subsection "Session engine"
\fIsession (enum)\fR
.IX Subsection "session (enum)"
.PP
This setting lets you enable a session engine for your web application. Be
default, sessions are disabled in Dancer, you must choose a session engine to
use them.
.PP
See Dancer::Session for supported engines and their respective configuration.
.PP
\fIsession_expires\fR
.IX Subsection "session_expires"
.PP
The session expiry time in seconds, or as e.g. \*(L"2 hours\*(R" (see
\&\*(L"expires\*(R" in Dancer::Cookie.  By default, there is no specific expiry time.
.PP
\fIsession_name\fR
.IX Subsection "session_name"
.PP
The name of the cookie to store the session \s-1ID\s0 in.  Defaults to
\&\f(CW\*(C`dancer.session\*(C'\fR.  This can be overridden by certain session engines.
.PP
\fIsession_secure\fR
.IX Subsection "session_secure"
.PP
The user's session \s-1ID\s0 is stored in a cookie.  If the \f(CW\*(C`session_secure\*(C'\fR setting
is set to a true value, the cookie will be marked as secure, meaning it should
only be sent over \s-1HTTPS\s0 connections.
.PP
\fIsession_is_http_only\fR
.IX Subsection "session_is_http_only"
.PP
This setting defaults to 1 and instructs the session cookie to be
created with the \f(CW\*(C`HttpOnly\*(C'\fR option active, meaning that JavaScript
will not be able to access to its value.
.SS "auto_page (boolean)"
.IX Subsection "auto_page (boolean)"
For simple pages where you're not doing anything dynamic, but still
want to use the template engine to provide headers etc, you can use
the auto_page feature to avoid the need to create a route for each
page.
.PP
With \f(CW\*(C`auto_page\*(C'\fR enabled, if the requested path does not match any
specific route, Dancer will check in the views directory for a
matching template, and use it to satisfy the request if found.
.PP
Simply enable auto_page in your config:
.PP
.Vb 1
\&    auto_page: 1
.Ve
.PP
Then, if you request \f(CW\*(C`/foo/bar\*(C'\fR, Dancer will look in the views dir for
\&\f(CW\*(C`/foo/bar.tt\*(C'\fR.
.PP
Dancer will honor your \f(CW\*(C`before_template\*(C'\fR code, and all default
variables. They will be accessible and interpolated on automatic
served pages.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module has been written by Alexis Sukrieh <sukria@cpan.org> and others,
see the \s-1AUTHORS\s0 file that comes with this distribution for details.
.SH "LICENSE"
.IX Header "LICENSE"
This module is free software and is released under the same terms as Perl
itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Dancer
