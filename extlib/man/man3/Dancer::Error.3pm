.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dancer::Error 3"
.TH Dancer::Error 3 "2011-07-07" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Error \- class for representing fatal errors
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # taken from send_file:
\&    use Dancer::Error;
\&
\&    my $error = Dancer::Error\->new(
\&        code    => 404,
\&        message => "No such file: \`$path\*(Aq"
\&    );
\&
\&    Dancer::Response\->set($error\->render);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
With Dancer::Error you can throw reasonable-looking errors to the user instead
of crashing the application and filling up the logs.
.PP
This is usually used in debugging environments, and it's what Dancer uses as
well under debugging to catch errors and show them on screen.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "code"
.IX Subsection "code"
The code that caused the error.
.PP
This is only an attribute getter, you'll have to set it at \f(CW\*(C`new\*(C'\fR.
.SS "title"
.IX Subsection "title"
The title of the error page.
.PP
This is only an attribute getter, you'll have to set it at \f(CW\*(C`new\*(C'\fR.
.SS "message"
.IX Subsection "message"
The message of the error page.
.PP
This is only an attribute getter, you'll have to set it at \f(CW\*(C`new\*(C'\fR.
.SH "METHODS/SUBROUTINES"
.IX Header "METHODS/SUBROUTINES"
.SS "new"
.IX Subsection "new"
Create a new Dancer::Error object.
.PP
\fItitle\fR
.IX Subsection "title"
.PP
The title of the error page.
.PP
\fItype\fR
.IX Subsection "type"
.PP
What type of error this is.
.PP
\fIcode\fR
.IX Subsection "code"
.PP
The code that caused the error.
.PP
\fImessage\fR
.IX Subsection "message"
.PP
The message that will appear to the user.
.SS "backtrace"
.IX Subsection "backtrace"
Create a backtrace of the code where the error is caused.
.PP
This method tries to find out where the error appeared according to the actual
error message (using the \f(CW\*(C`message\*(C'\fR attribute) and tries to parse it (supporting
the regular/default Perl warning or error pattern and the Devel::SimpleTrace
output) and then returns an error-higlighted \f(CW\*(C`message\*(C'\fR.
.SS "tabulate"
.IX Subsection "tabulate"
Small subroutine to help output nicer.
.SS "dumper"
.IX Subsection "dumper"
This uses Data::Dumper to create nice content output with a few predefined
options.
.SS "render"
.IX Subsection "render"
Renders a response using Dancer::Response.
.SS "environment"
.IX Subsection "environment"
A main function to render environment information: the caller (using
\&\f(CW\*(C`get_caller\*(C'\fR), the settings and environment (using \f(CW\*(C`dumper\*(C'\fR) and more.
.SS "get_caller"
.IX Subsection "get_caller"
Creates a strack trace of callers.
.SS "_censor"
.IX Subsection "_censor"
An internal method that tries to censor out content which should be protected.
.PP
\&\f(CW\*(C`dumper\*(C'\fR calls this method to censor things like passwords and such.
.SS "_html_encode"
.IX Subsection "_html_encode"
Internal method to encode entities that are illegal in (X)HTML. We output as
\&\s-1UTF\-8\s0, so no need to encode all non-ASCII characters or use a module.
\&\s-1FIXME\s0 : this is not true anymore, output can be any charset. Need fixing.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alexis Sukrieh
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2009\-2010 Alexis Sukrieh.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
