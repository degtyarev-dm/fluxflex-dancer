.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dancer::Deployment 3"
.TH Dancer::Deployment 3 "2011-08-17" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Deployment \- common ways to put your Dancer app into use
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dancer has been designed to be flexible, and this flexibility extends to your
choices when deploying your Dancer app.
.SS "Running as a cgi-script (or fast-cgi)"
.IX Subsection "Running as a cgi-script (or fast-cgi)"
In providing ultimate flexibility in terms of deployment, your Dancer app can
be run as a simple cgi-script out-of-the-box. No additional web-server
configuration needed.  Your web server should recognize .cgi files and be able
to serve Perl scripts.  The Perl module Plack::Runner is required.
.PP
Start by adding the following to your apache configuration (httpd.conf or
sites\-available/*site*):
.PP
.Vb 4
\&    <VirtualHost *:80>
\&        ServerName www.example.com
\&        DocumentRoot /srv/www.example.com/public
\&        ServerAdmin you@example.com
\&
\&                <Directory "/srv/www.example.com/public">
\&           AllowOverride None
\&           Options +ExecCGI \-MultiViews +SymLinksIfOwnerMatch
\&           Order allow,deny
\&           Allow from all
\&           AddHandler cgi\-script .cgi
\&                </Directory>
\&
\&                RewriteEngine On
\&                RewriteCond %{REQUEST_FILENAME} !\-f
\&                RewriteRule ^(.*)$ /dispatch.fcgi$1 [QSA,L]
\&
\&        ErrorLog  /var/log/apache2/www.example.com\-error.log
\&        CustomLog /var/log/apache2/www.example.com\-access_log common
\&        </VirtualHost>
.Ve
.PP
Here, the mod_rewrite magic for Pretty-URLs is directly put in Apache's configuration. 
But if your web server supports .htaccess files, you can drop those lines in a .htaccess file.
.PP
To check if your server supports mod_rewrite type \f(CW\*(C`apache2 \-l\*(C'\fR to list modules. 
To enable mod_rewrite (Debian), run \f(CW\*(C`a2enmod rewrite\*(C'\fR. Place following code in 
a file called .htaccess in your application's root folder:
.PP
.Vb 6
\&    # BEGIN dancer application htaccess
\&    RewriteEngine On
\&    RewriteCond %{SCRIPT_FILENAME} !\-d
\&    RewriteCond %{SCRIPT_FILENAME} !\-f
\&    RewriteRule (.*) /dispatch.cgi$1 [L]
\&    # END dancer application htaccess
.Ve
.PP
Now you can access your dancer application URLs as if you were using the
embedded web server.
.PP
.Vb 1
\&    http://localhost/
.Ve
.PP
This option is a no-brainer, easy to setup, low maintenance but serves requests
slower than all other options.
.PP
You can use the same technique to deploy with FastCGI, by just changing the line:
.PP
.Vb 1
\&        AddHandler cgi\-script .cgi
.Ve
.PP
By:
.PP
.Vb 1
\&        AddHandler fastcgi\-script .fcgi
.Ve
.PP
Of course remember to update your rewrite rules, if you have set any:
.PP
.Vb 1
\&    RewriteRule (.*) /dispatch.fcgi$1 [L]
.Ve
.SS "Running stand-alone"
.IX Subsection "Running stand-alone"
At the simplest, your Dancer app can run standalone, operating as its own
webserver using HTTP::Simple::PSGI.
.PP
Simply fire up your app:
.PP
.Vb 3
\&    $ perl bin/app.pl
\&    >> Listening on 0.0.0.0:3000
\&    == Entering the dance floor ...
.Ve
.PP
Point your browser at it, and away you go!
.PP
This option can be useful for small personal web apps or internal apps, but if
you want to make your app available to the world, it probably won't suit you.
.PP
\fIRunning on Perl webservers with plackup\fR
.IX Subsection "Running on Perl webservers with plackup"
.PP
A number of Perl web servers supporting \s-1PSGI\s0 are available on cpan:
.IP "Starman" 4
.IX Item "Starman"
\&\f(CW\*(C`Starman\*(C'\fR is a high performance web server, with support for preforking, signals, ...
.IP "Twiggy" 4
.IX Item "Twiggy"
\&\f(CW\*(C`Twiggy\*(C'\fR is an \f(CW\*(C`AnyEvent\*(C'\fR web server, it's light and fast.
.IP "Corona" 4
.IX Item "Corona"
\&\f(CW\*(C`Corona\*(C'\fR is a \f(CW\*(C`Coro\*(C'\fR based web server.
.PP
To start your application, just run plackup (see Plack and specific servers
above for all available options):
.PP
.Vb 2
\&   $ plackup bin/app.pl
\&   $ plackup \-E deployment \-s Starman \-\-workers=10 \-p 5001 \-a bin/app.pl
.Ve
.PP
As you can see, the scaffolded Perl script for your app can be used as a \s-1PSGI\s0
startup file.
.PP
Enabling content compression
.IX Subsection "Enabling content compression"
.PP
Content compression (gzip, deflate) can be easily enabled via a Plack
middleware (see Plack#Plack::Middleware): Plack::Middleware::Deflater.
It's a middleware to encode the response body in gzip or deflate, based on
Accept-Encoding \s-1HTTP\s0 request header.
.PP
Enable it as you would enable any Plack middleware. First you need to install
Plack::Middleware::Deflater, then in the configuration file (usually
\&\fIenvironments/development.yml\fR), add these lines:
.PP
.Vb 4
\&  plack_middlewares:
\&    \-
\&      \- Plack::Middleware::Deflater
\&      \- ...
.Ve
.PP
These lines tell Dancer to add Plack::Middleware::Deflater to the list of
middlewares to pass to Plack::Builder, when wrapping the Dancer app. The
syntax is :
.IP "\(bu" 4
as key: the name of the Plack middleware to use
.IP "\(bu" 4
as value: the options to pass it as a list. In our case, there is no option to
specify to Plack::Middleware::Deflater, so we use an empty \s-1YAML\s0 list.
.PP
To test if content compression works, trace the \s-1HTTP\s0 request and response
before and after enabling this middleware. Among other things, you should
notice that the response is gzip or deflate encoded, and contains a header
\&\f(CW\*(C`Content\-Encoding\*(C'\fR set to \f(CW\*(C`gzip\*(C'\fR or \f(CW\*(C`deflate\*(C'\fR
.PP
\fIRunning multiple apps with Plack::Builder\fR
.IX Subsection "Running multiple apps with Plack::Builder"
.PP
You can use Plack::Builder to mount multiple Dancer applications on
a \s-1PSGI\s0 webserver like Starman.
.PP
Start by creating a simple app.psgi file:
.PP
.Vb 2
\&    use Dancer \*(Aq:syntax\*(Aq;
\&    use Plack::Builder;
\&
\&    setting apphandler => \*(AqPSGI\*(Aq;
\&
\&    my $app1 = sub {
\&        my $env = shift;
\&        local $ENV{DANCER_APPDIR} = \*(Aq/Users/franck/tmp/app1\*(Aq;
\&        setting appdir => \*(Aq/Users/franck/tmp/app1\*(Aq;
\&        load_app "app1";
\&        Dancer::App\->set_running_app(\*(Aqapp1\*(Aq);
\&        Dancer::Config\->load;
\&        my $request = Dancer::Request\->new( env => $env );
\&        Dancer\->dance($request);
\&    };
\&
\&    my $app2 = sub {
\&        my $env = shift;
\&        local $ENV{DANCER_APPDIR} = \*(Aq/Users/franck/tmp/app2\*(Aq;
\&        setting appdir => \*(Aq/Users/franck/tmp/app2\*(Aq;
\&        load_app "app2";
\&        Dancer::App\->set_running_app(\*(Aqapp2\*(Aq);
\&        Dancer::Config\->load;
\&        my $request = Dancer::Request\->new( env => $env );
\&        Dancer\->dance($request);
\&    };
\&
\&    builder {
\&        mount "/app1" => builder {$app1};
\&        mount "/app2" => builder {$app2};
\&    };
.Ve
.PP
and now use Starman
.PP
.Vb 1
\&    plackup \-a app.psgi \-s Starman
.Ve
.PP
\fICreating a service\fR
.IX Subsection "Creating a service"
.PP
You can turn your app into proper service running in background using one of the following examples:
.PP
Using Ubic
.IX Subsection "Using Ubic"
.PP
Ubic is an extensible perlish service manager. You can use it to start and stop any services, automatically start them on reboots or daemon failures, and implement custom status checks.
.PP
A basic \s-1PSGI\s0 service description (usually in /etc/ubic/service/application):
.PP
.Vb 1
\&    use parent qw(Ubic::Service::Plack);
\&
\&    # if your application is not installed in @INC path:
\&    sub start {
\&        my $self = shift;
\&        $ENV{PERL5LIB} = \*(Aq/path/to/your/application/lib\*(Aq;
\&        $self\->SUPER::start(@_);
\&    }
\&
\&    _\|_PACKAGE_\|_\->new(
\&        server => \*(AqStarman\*(Aq,
\&        app => \*(Aq/path/to/your/application/app.pl\*(Aq,
\&        port => 5000,
\&        user => \*(Aqwww\-data\*(Aq,
\&    );
.Ve
.PP
Run \f(CW\*(C`ubic start application\*(C'\fR to start the service.
.PP
Using daemontools
.IX Subsection "Using daemontools"
.PP
daemontools is a collection of tools for managing \s-1UNIX\s0 services. You can use it to easily start/restart/stop services.
.PP
A basic script to start an application: (in /service/application/run)
.PP
.Vb 1
\&    #!/bin/sh
\&
\&    # if your application is not installed in @INC path:
\&    export PERL5LIB=\*(Aq/path/to/your/application/lib\*(Aq
\&
\&    exec 2>&1 \e
\&    /usr/local/bin/plackup \-s Starman \-a /path/to/your/application/app.pl \-p 5000
.Ve
.PP
\fIRunning stand-alone behind a proxy / load balancer\fR
.IX Subsection "Running stand-alone behind a proxy / load balancer"
.PP
Another option would be to run your app stand-alone as described above, but then
use a proxy or load balancer to accept incoming requests (on the standard port
80, say) and feed them to your Dancer app.
.PP
This could be achieved using various software; examples would include:
.PP
Using Apache's mod_proxy
.IX Subsection "Using Apache's mod_proxy"
.PP
You could set up a VirtualHost for your web app, and proxy all requests through
to it:
.PP
.Vb 4
\&    <VirtualHost mywebapp.example.com:80>
\&    ProxyPass / http://localhost:3000/
\&    ProxyPassReverse / http://localhost:3000/
\&    </VirtualHost>
.Ve
.PP
Or, if you want your webapp to share an existing VirtualHost, you could have it
under a specified dir:
.PP
.Vb 2
\&    ProxyPass /mywebapp/ http://localhost:3000/
\&    ProxyPassReverse /mywebapp/ http://localhost:3000/
.Ve
.PP
It is important for you to note that the Apache2 modules mod_proxy and mod_proxy_http 
must be enabled.
.PP
.Vb 2
\&    a2enmod proxy
\&    a2enmod proxy_http
.Ve
.PP
It is also important to set permissions for proxying for security purposes, below is an example.
.PP
.Vb 4
\&    <Proxy *>
\&      Order allow,deny
\&      Allow from all
\&    </Proxy>
.Ve
.PP
Using perlbal
.IX Subsection "Using perlbal"
.PP
\&\f(CW\*(C`perlbal\*(C'\fR is a single-threaded event-based server written in Perl supporting \s-1HTTP\s0 load
balancing, web serving, and a mix of the two, available from
<http://www.danga.com/perlbal/>
.PP
It processes hundreds of millions of requests a day just for LiveJournal, Vox
and TypePad and dozens of other \*(L"Web 2.0\*(R" applications.
.PP
It can also provide a management interface to let you see various information on
requests handled etc.
.PP
It could easily be used to handle requests for your Dancer apps, too.
.PP
It can be easily installed from \s-1CPAN:\s0
.PP
.Vb 1
\&    perl \-MCPAN \-e \*(Aqinstall Perlbal\*(Aq
.Ve
.PP
Once installed, you'll need to write a configuration file.  See the examples
provided with perlbal, but you'll probably want something like:
.PP
.Vb 5
\&    CREATE POOL my_dancers
\&    POOL my_dancers ADD 10.0.0.10:3030
\&    POOL my_dancers ADD 10.0.0.11:3030
\&    POOL my_dancers ADD 10.0.0.12:3030
\&    POOL my_dancers ADD 10.0.0.13:3030
\&
\&    CREATE SERVICE my_webapp
\&    SET listen          = 0.0.0.0:80
\&    SET role            = reverse_proxy
\&    SET pool            = my_dancers
\&    SET persist_client  = on
\&    SET persist_backend = on
\&    SET verify_backend  = on
\&    ENABLE balancer
.Ve
.PP
Using balance
.IX Subsection "Using balance"
.PP
\&\f(CW\*(C`balance\*(C'\fR is a simple load-balancer from Inlab Software, available from
<http://www.inlab.de/balance.html>.
.PP
It could be used simply to hand requests to a standalone Dancer app. You could
even run several instances of your Dancer app, on the same machine or on several
machines, and use a machine running balance to distribute the requests between
them, for some serious heavy traffic handling!
.PP
To listen on port 80, and send requests to a Dancer app on port 3000:
.PP
.Vb 1
\&    balance http localhost:3000
.Ve
.PP
To listen on a specified \s-1IP\s0 only on port 80, and distribute requests between
multiple Dancer apps on multiple other machines:
.PP
.Vb 1
\&    balance \-b 10.0.0.1 80 10.0.0.2:3000 10.0.0.3:3000 10.0.0.4:3000
.Ve
.PP
Using Lighttpd
.IX Subsection "Using Lighttpd"
.PP
You can use Lighttp's mod_proxy:
.PP
.Vb 7
\&    $HTTP["url"] =~ "/application" {
\&        proxy.server = (
\&            "/" => (
\&                "application" => ( "host" => "127.0.0.1", "port" => 3000 )
\&            )
\&        )
\&    }
.Ve
.PP
This configuration will proxy all request to the \fB/application\fR path to the path \fB/\fR on localhost:3000.
.PP
Using Nginx
.IX Subsection "Using Nginx"
.PP
with Nginx:
.PP
.Vb 3
\&    upstream backendurl {
\&        server unix:THE_PATH_OF_YOUR_PLACKUP_SOCKET_HERE.sock;
\&    }
\&
\&    server {
\&      listen       80;
\&      server_name YOUR_HOST_HERE;
\&
\&      access_log /var/log/YOUR_ACCESS_LOG_HERE.log;
\&      error_log  /var/log/YOUR_ERROR_LOG_HERE.log info;
\&
\&      root YOUR_ROOT_PROJECT/public;
\&      location / {
\&        try_files $uri @proxy;
\&        access_log off;
\&        expires max;
\&      }
\&
\&      location @proxy {
\&            proxy_set_header Host $http_host;
\&            proxy_set_header X\-Forwarded\-Host $host;
\&            proxy_set_header X\-Real\-IP $remote_addr;
\&            proxy_set_header X\-Forwarded\-For $proxy_add_x_forwarded_for;
\&            proxy_pass       http://backendurl;
\&      }
\&
\&    }
.Ve
.PP
You will need plackup to start a worker listening on a socket :
.PP
.Vb 2
\&    cd YOUR_PROJECT_PATH
\&    sudo \-u www plackup \-E production \-s Starman \-\-workers=2 \-l THE_PATH_OF_YOUR_PLACKUP_SOCKET_HERE.sock \-a bin/app.pl
.Ve
.PP
A good way to start this is to use \f(CW\*(C`daemontools\*(C'\fR and place this line with
all environments variables in the \*(L"run\*(R" file.
.SS "Running from Apache"
.IX Subsection "Running from Apache"
You can run your Dancer app from Apache using the following examples:
.PP
\fIRunning from Apache with Plack\fR
.IX Subsection "Running from Apache with Plack"
.PP
You can run your app from Apache using \s-1PSGI\s0 (Plack), with a config like the
following:
.PP
.Vb 4
\&    <VirtualHost myapp.example.com>
\&        ServerName www.myapp.example.com
\&        ServerAlias myapp.example.com
\&        DocumentRoot /websites/myapp.example.com
\&
\&        <Directory /home/myapp/myapp>
\&            AllowOverride None
\&            Order allow,deny
\&            Allow from all
\&        </Directory>
\&
\&        <Location />
\&            SetHandler perl\-script
\&            PerlHandler Plack::Handler::Apache2
\&            PerlSetVar psgi_app /websites/myapp.example.com/app.pl
\&        </Location>
\&
\&        ErrorLog  /websites/myapp.example.com/logs/error_log
\&        CustomLog /websites/myapp.example.com/logs/access_log common
\&    </VirtualHost>
.Ve
.PP
To set the environment you want to use for your application (production or development), you can set it this way:
.PP
.Vb 5
\&    <VirtualHost>
\&        ...
\&        SetEnv DANCER_ENVIRONMENT "production"
\&        ...
\&    </VirtualHost>
.Ve
.PP
\fIRunning from Apache under appdir\fR
.IX Subsection "Running from Apache under appdir"
.PP
If you want to deploy multiple applications under the same VirtualHost, using
one application per directory for example, you can do the following.
.PP
This example uses the FastCGI dispatcher that comes with Dancer, but you should
be able to adapt this to use any other way of deployment described in this
guide. The only purpose of this example is to show how to deploy multiple
applications under the same base directory/virtualhost.
.PP
.Vb 5
\&    <VirtualHost *:80>
\&        ServerName localhost
\&        DocumentRoot "/path/to/rootdir"
\&        RewriteEngine On
\&        RewriteCond %{REQUEST_FILENAME} !\-f
\&
\&        <Directory "/path/to/rootdir">
\&            AllowOverride None
\&            Options +ExecCGI \-MultiViews +SymLinksIfOwnerMatch
\&            Order allow,deny
\&            Allow from all
\&            AddHandler fastcgi\-script .fcgi
\&        </Directory>
\&
\&        RewriteRule /App1(.*)$ /App1/public/dispatch.fcgi$1 [QSA,L]
\&        RewriteRule /App2(.*)$ /App2/public/dispatch.fcgi$1 [QSA,L]
\&        ...
\&        RewriteRule /AppN(.*)$ /AppN/public/dispatch.fcgi$1 [QSA,L]
\&    </VirtualHost>
.Ve
.PP
Of course, if your Apache configuration allows that, you can put the
RewriteRules in a .htaccess file directly within the application's directory,
which lets you add a new application without changing the Apache configuration.
.SS "Running on lighttpd (\s-1CGI\s0)"
.IX Subsection "Running on lighttpd (CGI)"
To run as a \s-1CGI\s0 app on lighttpd, just create a soft link to the dispatch.cgi
script (created when you run dancer \-a MyApp) inside your system's cgi-bin
folder. Make sure mod_cgi is enabled.
.PP
.Vb 1
\&    ln \-s /path/to/MyApp/public/dispatch.cgi /usr/lib/cgi\-bin/mycoolapp.cgi
.Ve
.SS "Running on lighttpd (FastCGI)"
.IX Subsection "Running on lighttpd (FastCGI)"
Make sure mod_fcgi is enabled. You also must have \s-1FCGI\s0 installed.
.PP
This example configuration uses \s-1TCP/IP:\s0
.PP
.Vb 11
\&    $HTTP["url"] == "^/app" {
\&        fastcgi.server += (
\&            "/app" => (
\&                "" => (
\&                    "host" => "127.0.0.1",
\&                    "port" => "5000",
\&                    "check\-local" => "disable",
\&                )
\&            )
\&        )
\&    }
.Ve
.PP
Launch your application:
.PP
.Vb 1
\&    plackup \-s FCGI \-\-port 5000 bin/app.pl
.Ve
.PP
This example configuration uses a socket:
.PP
.Vb 10
\&    $HTTP["url"] =~ "^/app" {
\&        fastcgi.server += (
\&            "/app" => (
\&                "" => (
\&                    "socket" => "/tmp/fcgi.sock",
\&                    "check\-local" => "disable",
\&                )
\&            )
\&        )
\&    }
.Ve
.PP
Launch your application:
.PP
.Vb 1
\&    plackup \-s FCGI \-\-listen /tmp/fcgi.sock bin/app.pl
.Ve
