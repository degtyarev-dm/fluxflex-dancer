.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dancer::MIME 3"
.TH Dancer::MIME 3 "2011-07-07" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::MIME \- Singleton object to handle MimeTypes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # retrieve object instance
\&    my $mime = Data::MIME\->instance();
\&
\&    # return a hash reference of user defined types
\&    my $types = $mime\->custom_types;
\&
\&    # return the default mime\-type for unknown files
\&    $mime\->default
\&
\&    # set the default mime\-type with Dancer::Config or Dancer, like
\&    set default_mime_type => "text/plain";
\&    # or directly in your config.yml file.
\&
\&    # add non standard mime type
\&    $mime\->add_type( foo => "text/foo" );
\&
\&    # add an alias to an existing type
\&    $mime\->add_alias( bar => "foo" );
\&
\&    # get mime type for standard or non standard types
\&    $nonstandard_type = $mime\->for_name(\*(Aqfoo\*(Aq);
\&    $standard_type    = $mime\->for_name(\*(Aqsvg\*(Aq);
\&
\&    # get mime type for a file (given the extension)
\&    $mime_type = $mime\->for_file("foo.bar");
.Ve
.SH "PUBLIC API"
.IX Header "PUBLIC API"
.SS "instance"
.IX Subsection "instance"
.Vb 1
\&    my $mime = Dancer::MIME\->instance();
.Ve
.PP
return the Dancer::MIME instance object.
.SS "add_type"
.IX Subsection "add_type"
.Vb 2
\&    # add nonstandard mime type
\&    $mime\->add_type( foo => "text/foo" );
.Ve
.PP
Add a non standard mime type or overrides an existing one.
.SS "add_alias"
.IX Subsection "add_alias"
.Vb 2
\&    # add alias to standard or previous alias
\&    $mime\->add_alias( my_jpg => \*(Aqjpg\*(Aq );
.Ve
.PP
Adds an alias to an existing mime type.
.SS "for_name"
.IX Subsection "for_name"
.Vb 1
\&    $mime\->for_name( \*(Aqjpg\*(Aq );
.Ve
.PP
Retrieve the mime type for a standard or non standard mime type.
.SS "for_file"
.IX Subsection "for_file"
.Vb 1
\&    $mime\->for_file( \*(Aqfile.jpg\*(Aq );
.Ve
.PP
Retrieve the mime type for a file, based on a file extension.
.SS "custom_types"
.IX Subsection "custom_types"
.Vb 1
\&    my $types = $mime\->custom_types;
.Ve
.PP
Retrieve the full hash table of added mime types.
.SS "name_or_type"
.IX Subsection "name_or_type"
.Vb 1
\&    my $type = $mime\->name_or_type($thing);
.Ve
.PP
Resolves the \f(CW$thing\fR into a content \f(CW$type\fR whether it's the name of a
\&\s-1MIME\s0 type like \*(L"txt\*(R" or already a mime type like \*(L"text/plain\*(R".
.SH "DEPRECATED API"
.IX Header "DEPRECATED API"
.SS "add_mime_type"
.IX Subsection "add_mime_type"
Check the new \f(CW\*(C`add\*(C'\fR method.
.SS "add_mime_alias"
.IX Subsection "add_mime_alias"
Check the new \f(CW\*(C`add\*(C'\fR method.
.SS "mime_type_for"
.IX Subsection "mime_type_for"
Check the new \f(CW\*(C`for_name\*(C'\fR and \f(CW\*(C`name_or_type\*(C'\fR methods.
.SH "AUTHORS"
.IX Header "AUTHORS"
This module has been written and rewritten by different people from
Dancer project.
.SH "LICENCE"
.IX Header "LICENCE"
This module is released under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Dancer
